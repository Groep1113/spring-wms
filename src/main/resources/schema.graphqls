type Role {
    id: Int!
    name: String!
    users: [User]!
}

scalar LocalDate

type User {
    id: Int!
    firstName: String!
    lastName: String!
    email: String!
    token: String
    roles: [Role]!
}

type LoginPayload {
  token: String
  user: User
}

type Item {
    id: Int!
    name: String!
    code: String
    recommendedStock: Int
    locations: [Location]
    categories: [Category]
    supplier: Supplier
    attributes: [Attribute]!
}

type Attribute {
    id: Int!
    name: String!
    value: String!
    item: Item!
}

type Location {
    id: Int!
    code: String!
    depth: Int!
    width: Int!
    height: Int!
    items: [Item]!
    categories: [Category]!
    account: Account
}

type Supplier {
    id: Int!
    name: String!
}

type Category {
    id: Int!
    name: String!
    items: [Item]!
    locations: [Location]!
}

type Transaction {
    id: Int!
    fromAccount: Account!
    toAccount: Account!
    createdDate: LocalDate!
    updateDate: LocalDate!
    deletedDate: LocalDate
    plannedDate: LocalDate!
    receivedDate: LocalDate
    description: String
    locked: Boolean!
    transactionLines: [TransactionLine]!
}

type TransactionLine {
    id: Int!
    amount: Int!
    transaction: Transaction!
    item: Item!
}

type Account {
    id: Int!
    name: String!
    location: Location
    deletedDate: LocalDate
}

type Balance {
    id: Int!
    amount: Int!
    item: Item!
    account: Account!
}

type Query {
    users: [User]!
    userByMail(email: String!): User
	user(id: Int!): User
	suppliers: [Supplier]!
	supplier(id: Int!): Supplier
	roles: [Role]!
	role(id: Int!): Role
	currentUser: User
	items: [Item]!
	item(id: Int!): Item
	locations: [Location]!
	location(id: Int!): Location
    categories: [Category]!
    category(id: Int!): Category

    # All the parameters are false by default.
    transactions(showDeleted: Boolean, showOrders: Boolean, showReservations: Boolean, showReturns: Boolean): [Transaction]!

    transaction(id: Int!): Transaction
    transactionLines: [TransactionLine]!
    transactionLine(id: Int!): TransactionLine
    accounts: [Account]!
    account(id: Int!): Account
    balances: [Balance]!
    balance(id: Int!): Balance
    attribute(id: Int!): Attribute
    attributes: [Attribute]!
}

type Mutation {
    login(email: String!, password: String!): LoginPayload

    createSupplier(name: String!): Supplier
    updateSupplier(name: String!, id: Int!): Supplier
    deleteSupplier(id: Int!): Supplier

    createItem(name: String!, code: String, recommendedStock: Int, locationId: Int, categoryId: Int, supplierId: Int): Item
    updateItem(itemId: Int!, name: String, code: String, recommendedStock: Int, supplierId: Int): Item
    deleteItem(itemId: Int!): Boolean
    itemAddLocation(itemId: Int!, locationId: Int!): Item
    itemRemoveLocation(itemId: Int!, locationId: Int!): Item
    itemAddCategory(itemId: Int!, categoryId: Int!): Item
    itemRemoveCategory(itemId: Int!, categoryId: Int!): Item
    createAttribute(itemId: Int!, name: String!, value: String!): Item
    deleteAttribute(attributeId: Int!): Boolean
    updateAttribute(attributeId: Int!, name: String, value: String, itemId: Int): Attribute

    createUser(firstName: String!, lastName: String!, email: String!, password: String!): User
    addRole(userId: Int!, roleId: Int!): User
    removeRole(userId: Int!, roleId: Int!): User
    updateUser(id: Int!, firstName: String, lastName: String, email: String, password: String): User

    createLocation(code: String!, depth: Int!, width: Int!, height: Int!): Location
    updateLocation(locationId: Int!, code: String, depth: Int, width: Int, height: Int): Location
    deleteLocation(locationId: Int!): Boolean

    createCategory(name: String!): Category
    deleteCategory(categoryId: Int!): Boolean
    updateCategory(categoryId: Int!, name: String): Category
    categoryAddLocation(categoryId: Int!, locationId: Int!): Category
    categoryRemoveLocation(categoryId: Int!, locationId: Int!): Category

    # Creates an account that keeps track of balances in the warehouse.
    createWarehouseAccount: Account

    # Creates an account representing the in-use items. Not keeping track of items outside of the warehouse because it is out-of-scope.
    createInUseAccount: Account

    # Every item in the warehouse needs a balance to see how much of it is in stock. Default account is warehouse.
    createBalance(itemId: Int!, accountId: Int, amount: Int): Balance

    # Sets the balance to given amount. Creates a balance mutation along with a default reason, if not specified.
    setBalance(balanceId: Int!, amount: Int!, reason: String): Balance

    # Transaction that takes items out of the warehouse. Adding a line is optional.
    createReservationTransaction(itemId: Int, amount: Int, plannedDate: LocalDate, description: String, locationId: Int): Transaction

    # Transaction that represents an order from a supplier to the warehouse. Adding a line is optional.
    createOrderTransaction(itemId: Int, amount: Int, plannedDate: LocalDate, description: String, locationId: Int): Transaction

    # Transaction that takes items into the warehouse. Adding a line is optional.
    createReturnTransaction(itemId: Int, amount: Int, plannedDate: LocalDate, description: String, locationId: Int): Transaction

    # Adds line to transaction. Default planned date is today.
    addLineToTransaction(transactionId: Int!, itemId: Int!, amount: Int!): TransactionLine

    # Allows you to change properties of the transaction line.
    updateTransactionLine(TransactionLineId: Int!, itemId: Int, amount: Int): TransactionLine

    # Allows you to change sending- and/or receiving account of transaction.
    updateTransaction(transactionId: Int!, fromAccountId: Int, toAccountId: Int, plannedDate: LocalDate, description: String): Transaction

    # Updates the balances and locks the transaction. Also checks if stock wont go below zero before executing.
    executeTransaction(transactionId: Int!): Transaction

    # Fake delete action. It only sets the date_deleted to the current day and locks the transaction.
    deleteTransaction(transactionId: Int!): Transaction

    # Deletes transaction line, ignoring lock.
    deleteTransactionLine(TransactionLineId: Int!): Boolean
}