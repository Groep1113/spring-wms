type Role {
    id: Int!
    name: String!
    users: [User]!
}

type User {
    id: Int!
    firstName: String!
    lastName: String!
    email: String!
    roles: [Role]!
}

type LoginPayload {
  token: String
  user: User
}

type Item {
    id: Int!
    name: String!
    code: String!
    recommendedStock: Int!
    locations: [Location]!
    categories: [Category]!
}

type Location {
    id: Int!
    code: String!
    depth: Int!
    width: Int!
    height: Int!
    items: [Item]!
    categories: [Category]!
}

type Category {
    id: Int!
    name: String!
    items: [Item]!
    locations: [Location]!
}

type Query {
    users: [User]!
    userByMail(email: String!): User
	user(id: Int!): User
	items: [Item]!
	item(id: Int!): Item
	locations: [Location]!
	location(id: Int!): Location
    categories: [Category]!
    category(id: Int!): Category
}

type Mutation {
    login(email: String!, password: String!): LoginPayload

    createItem(name: String!, code: String!, recommendedStock: Int!, locationId: Int!): Item
    deleteItem(itemId: Int!): Boolean
    itemChangeLocation(itemId: Int!, locationId: Int!): Item
    itemAddCategory(itemId: Int!, categoryId: Int!): Item
    itemRemoveCategory(itemId: Int!, categoryId: Int!): Item

    createUser(firstName: String!, lastName: String!, email: String!, password: String!): User
    addRole(userId: Int!, roleId: Int!): User
    removeRole(userId: Int!, roleId: Int!): User

    createLocation(code: String!, depth: Int!, width: Int!, height: Int!): Location
    deleteLocation(locationId: Int!): Boolean

    createCategory(name: String!): Category
    deleteCategory(categoryId: Int!): Boolean
    categoryChangeName(categoryId: Int!, name: String!): Category
    categoryAddLocation(categoryId: Int!, locationId: Int!): Category
    categoryRemoveLocation(categoryId: Int!, locationId: Int!): Category
}